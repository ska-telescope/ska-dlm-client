# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from typing import Any, Dict, List, Optional, Tuple, Union

from pydantic import Field, StrictFloat, StrictInt, StrictStr, validate_call
from typing_extensions import Annotated

from openapi_client_dlm.api_client import ApiClient, RequestSerialized
from openapi_client_dlm.api_response import ApiResponse
from openapi_client_dlm.rest import RESTResponseType


class MigrationApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def copy_data_item_migration_copy_data_item_get(
        self,
        item_name: Annotated[
            Optional[StrictStr],
            Field(
                description='data item name, when empty the first 1000 items are returned, by default ""'
            ),
        ] = None,
        oid: Annotated[
            Optional[StrictStr],
            Field(
                description='object id, Return data_items referred to by the OID provided, by default ""'
            ),
        ] = None,
        uid: Annotated[
            Optional[StrictStr],
            Field(description='Return data_item referred to by the UID provided, by default ""'),
        ] = None,
        destination_name: Annotated[
            Optional[StrictStr],
            Field(description='the name of the destination storage volume, by default ""'),
        ] = None,
        destination_id: Annotated[
            Optional[StrictStr], Field(description='the destination storage, by default ""')
        ] = None,
        path: Annotated[
            Optional[StrictStr], Field(description='the destination path, by default ""')
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Copy Data Item

        Copy a data_item from source to destination.  Steps (1) get the current storage_id(s) of the item (2) convert one(first) storage_id to a configured rclone backend (3) check whether item already exists on destination (4) initialize the new item with the same OID on the new storage (5) use the rclone copy command to copy it to the new location (6) make sure the copy was successful

        :param item_name: data item name, when empty the first 1000 items are returned, by default \"\"
        :type item_name: str
        :param oid: object id, Return data_items referred to by the OID provided, by default \"\"
        :type oid: str
        :param uid: Return data_item referred to by the UID provided, by default \"\"
        :type uid: str
        :param destination_name: the name of the destination storage volume, by default \"\"
        :type destination_name: str
        :param destination_id: the destination storage, by default \"\"
        :type destination_id: str
        :param path: the destination path, by default \"\"
        :type path: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._copy_data_item_migration_copy_data_item_get_serialize(
            item_name=item_name,
            oid=oid,
            uid=uid,
            destination_name=destination_name,
            destination_id=destination_id,
            path=path,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "object",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def copy_data_item_migration_copy_data_item_get_with_http_info(
        self,
        item_name: Annotated[
            Optional[StrictStr],
            Field(
                description='data item name, when empty the first 1000 items are returned, by default ""'
            ),
        ] = None,
        oid: Annotated[
            Optional[StrictStr],
            Field(
                description='object id, Return data_items referred to by the OID provided, by default ""'
            ),
        ] = None,
        uid: Annotated[
            Optional[StrictStr],
            Field(description='Return data_item referred to by the UID provided, by default ""'),
        ] = None,
        destination_name: Annotated[
            Optional[StrictStr],
            Field(description='the name of the destination storage volume, by default ""'),
        ] = None,
        destination_id: Annotated[
            Optional[StrictStr], Field(description='the destination storage, by default ""')
        ] = None,
        path: Annotated[
            Optional[StrictStr], Field(description='the destination path, by default ""')
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Copy Data Item

        Copy a data_item from source to destination.  Steps (1) get the current storage_id(s) of the item (2) convert one(first) storage_id to a configured rclone backend (3) check whether item already exists on destination (4) initialize the new item with the same OID on the new storage (5) use the rclone copy command to copy it to the new location (6) make sure the copy was successful

        :param item_name: data item name, when empty the first 1000 items are returned, by default \"\"
        :type item_name: str
        :param oid: object id, Return data_items referred to by the OID provided, by default \"\"
        :type oid: str
        :param uid: Return data_item referred to by the UID provided, by default \"\"
        :type uid: str
        :param destination_name: the name of the destination storage volume, by default \"\"
        :type destination_name: str
        :param destination_id: the destination storage, by default \"\"
        :type destination_id: str
        :param path: the destination path, by default \"\"
        :type path: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._copy_data_item_migration_copy_data_item_get_serialize(
            item_name=item_name,
            oid=oid,
            uid=uid,
            destination_name=destination_name,
            destination_id=destination_id,
            path=path,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "object",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def copy_data_item_migration_copy_data_item_get_without_preload_content(
        self,
        item_name: Annotated[
            Optional[StrictStr],
            Field(
                description='data item name, when empty the first 1000 items are returned, by default ""'
            ),
        ] = None,
        oid: Annotated[
            Optional[StrictStr],
            Field(
                description='object id, Return data_items referred to by the OID provided, by default ""'
            ),
        ] = None,
        uid: Annotated[
            Optional[StrictStr],
            Field(description='Return data_item referred to by the UID provided, by default ""'),
        ] = None,
        destination_name: Annotated[
            Optional[StrictStr],
            Field(description='the name of the destination storage volume, by default ""'),
        ] = None,
        destination_id: Annotated[
            Optional[StrictStr], Field(description='the destination storage, by default ""')
        ] = None,
        path: Annotated[
            Optional[StrictStr], Field(description='the destination path, by default ""')
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Copy Data Item

        Copy a data_item from source to destination.  Steps (1) get the current storage_id(s) of the item (2) convert one(first) storage_id to a configured rclone backend (3) check whether item already exists on destination (4) initialize the new item with the same OID on the new storage (5) use the rclone copy command to copy it to the new location (6) make sure the copy was successful

        :param item_name: data item name, when empty the first 1000 items are returned, by default \"\"
        :type item_name: str
        :param oid: object id, Return data_items referred to by the OID provided, by default \"\"
        :type oid: str
        :param uid: Return data_item referred to by the UID provided, by default \"\"
        :type uid: str
        :param destination_name: the name of the destination storage volume, by default \"\"
        :type destination_name: str
        :param destination_id: the destination storage, by default \"\"
        :type destination_id: str
        :param path: the destination path, by default \"\"
        :type path: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._copy_data_item_migration_copy_data_item_get_serialize(
            item_name=item_name,
            oid=oid,
            uid=uid,
            destination_name=destination_name,
            destination_id=destination_id,
            path=path,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "object",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _copy_data_item_migration_copy_data_item_get_serialize(
        self,
        item_name,
        oid,
        uid,
        destination_name,
        destination_id,
        path,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if item_name is not None:

            _query_params.append(("item_name", item_name))

        if oid is not None:

            _query_params.append(("oid", oid))

        if uid is not None:

            _query_params.append(("uid", uid))

        if destination_name is not None:

            _query_params.append(("destination_name", destination_name))

        if destination_id is not None:

            _query_params.append(("destination_id", destination_id))

        if path is not None:

            _query_params.append(("path", path))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/migration/copy_data_item",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
