# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import Any, Dict, Optional
from typing_extensions import Annotated

from openapi_client_dlm.api_client import ApiClient, RequestSerialized
from openapi_client_dlm.api_response import ApiResponse
from openapi_client_dlm.rest import RESTResponseType


class IngestApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def init_data_item_ingest_init_data_item_post(
        self,
        item_name: Annotated[Optional[StrictStr], Field(description="the item_name, can be empty, but then json_data has to be specified.")] = None,
        phase: Annotated[Optional[StrictStr], Field(description="the phase this item is set to (usually inherited from the storage)")] = None,
        authorization: Annotated[Optional[StrictStr], Field(description="Validated Bearer token with UserInfo")] = None,
        body: Optional[Dict[str, Any]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Init Data Item

        Intialize a new data_item by at least specifying an item_name.

        :param item_name: the item_name, can be empty, but then json_data has to be specified.
        :type item_name: str
        :param phase: the phase this item is set to (usually inherited from the storage)
        :type phase: str
        :param authorization: Validated Bearer token with UserInfo
        :type authorization: str
        :param body:
        :type body: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._init_data_item_ingest_init_data_item_post_serialize(
            item_name=item_name,
            phase=phase,
            authorization=authorization,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def init_data_item_ingest_init_data_item_post_with_http_info(
        self,
        item_name: Annotated[Optional[StrictStr], Field(description="the item_name, can be empty, but then json_data has to be specified.")] = None,
        phase: Annotated[Optional[StrictStr], Field(description="the phase this item is set to (usually inherited from the storage)")] = None,
        authorization: Annotated[Optional[StrictStr], Field(description="Validated Bearer token with UserInfo")] = None,
        body: Optional[Dict[str, Any]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Init Data Item

        Intialize a new data_item by at least specifying an item_name.

        :param item_name: the item_name, can be empty, but then json_data has to be specified.
        :type item_name: str
        :param phase: the phase this item is set to (usually inherited from the storage)
        :type phase: str
        :param authorization: Validated Bearer token with UserInfo
        :type authorization: str
        :param body:
        :type body: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._init_data_item_ingest_init_data_item_post_serialize(
            item_name=item_name,
            phase=phase,
            authorization=authorization,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def init_data_item_ingest_init_data_item_post_without_preload_content(
        self,
        item_name: Annotated[Optional[StrictStr], Field(description="the item_name, can be empty, but then json_data has to be specified.")] = None,
        phase: Annotated[Optional[StrictStr], Field(description="the phase this item is set to (usually inherited from the storage)")] = None,
        authorization: Annotated[Optional[StrictStr], Field(description="Validated Bearer token with UserInfo")] = None,
        body: Optional[Dict[str, Any]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Init Data Item

        Intialize a new data_item by at least specifying an item_name.

        :param item_name: the item_name, can be empty, but then json_data has to be specified.
        :type item_name: str
        :param phase: the phase this item is set to (usually inherited from the storage)
        :type phase: str
        :param authorization: Validated Bearer token with UserInfo
        :type authorization: str
        :param body:
        :type body: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._init_data_item_ingest_init_data_item_post_serialize(
            item_name=item_name,
            phase=phase,
            authorization=authorization,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _init_data_item_ingest_init_data_item_post_serialize(
        self,
        item_name,
        phase,
        authorization,
        body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if item_name is not None:
            
            _query_params.append(('item_name', item_name))
            
        if phase is not None:
            
            _query_params.append(('phase', phase))
            
        # process the header parameters
        if authorization is not None:
            _header_params['authorization'] = authorization
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/ingest/init_data_item',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def register_data_item_ingest_register_data_item_post(
        self,
        item_name: Annotated[StrictStr, Field(description="could be empty, in which case the first 1000 items are returned")],
        uri: Annotated[Optional[StrictStr], Field(description="the access path to the payload.")] = None,
        storage_name: Annotated[Optional[StrictStr], Field(description="the name of the configured storage volume (name or ID required)")] = None,
        storage_id: Annotated[Optional[StrictStr], Field(description="the ID of the configured storage.")] = None,
        item_format: Annotated[Optional[StrictStr], Field(description="format of the data item")] = None,
        eb_id: Annotated[Optional[StrictStr], Field(description="execution block ID provided by the client")] = None,
        authorization: Annotated[Optional[StrictStr], Field(description="Validated Bearer token with UserInfo")] = None,
        body: Optional[Dict[str, Any]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Register Data Item

        Ingest a data_item (register function is an alias).  This high level function is a combination of init_data_item, set_uri and set_state(READY). It also checks whether a data_item is already registered on the requested storage.  (1) check whether requested storage is known and accessible (2) check whether item is accessible/exists on that storage (3) check whether item is already registered on that storage (4) initialize the new item with the same OID on the new storage (5) set state to READY (6) generate metadata (7) notify the data dashboard

        :param item_name: could be empty, in which case the first 1000 items are returned (required)
        :type item_name: str
        :param uri: the access path to the payload.
        :type uri: str
        :param storage_name: the name of the configured storage volume (name or ID required)
        :type storage_name: str
        :param storage_id: the ID of the configured storage.
        :type storage_id: str
        :param item_format: format of the data item
        :type item_format: str
        :param eb_id: execution block ID provided by the client
        :type eb_id: str
        :param authorization: Validated Bearer token with UserInfo
        :type authorization: str
        :param body:
        :type body: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._register_data_item_ingest_register_data_item_post_serialize(
            item_name=item_name,
            uri=uri,
            storage_name=storage_name,
            storage_id=storage_id,
            item_format=item_format,
            eb_id=eb_id,
            authorization=authorization,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def register_data_item_ingest_register_data_item_post_with_http_info(
        self,
        item_name: Annotated[StrictStr, Field(description="could be empty, in which case the first 1000 items are returned")],
        uri: Annotated[Optional[StrictStr], Field(description="the access path to the payload.")] = None,
        storage_name: Annotated[Optional[StrictStr], Field(description="the name of the configured storage volume (name or ID required)")] = None,
        storage_id: Annotated[Optional[StrictStr], Field(description="the ID of the configured storage.")] = None,
        item_format: Annotated[Optional[StrictStr], Field(description="format of the data item")] = None,
        eb_id: Annotated[Optional[StrictStr], Field(description="execution block ID provided by the client")] = None,
        authorization: Annotated[Optional[StrictStr], Field(description="Validated Bearer token with UserInfo")] = None,
        body: Optional[Dict[str, Any]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Register Data Item

        Ingest a data_item (register function is an alias).  This high level function is a combination of init_data_item, set_uri and set_state(READY). It also checks whether a data_item is already registered on the requested storage.  (1) check whether requested storage is known and accessible (2) check whether item is accessible/exists on that storage (3) check whether item is already registered on that storage (4) initialize the new item with the same OID on the new storage (5) set state to READY (6) generate metadata (7) notify the data dashboard

        :param item_name: could be empty, in which case the first 1000 items are returned (required)
        :type item_name: str
        :param uri: the access path to the payload.
        :type uri: str
        :param storage_name: the name of the configured storage volume (name or ID required)
        :type storage_name: str
        :param storage_id: the ID of the configured storage.
        :type storage_id: str
        :param item_format: format of the data item
        :type item_format: str
        :param eb_id: execution block ID provided by the client
        :type eb_id: str
        :param authorization: Validated Bearer token with UserInfo
        :type authorization: str
        :param body:
        :type body: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._register_data_item_ingest_register_data_item_post_serialize(
            item_name=item_name,
            uri=uri,
            storage_name=storage_name,
            storage_id=storage_id,
            item_format=item_format,
            eb_id=eb_id,
            authorization=authorization,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def register_data_item_ingest_register_data_item_post_without_preload_content(
        self,
        item_name: Annotated[StrictStr, Field(description="could be empty, in which case the first 1000 items are returned")],
        uri: Annotated[Optional[StrictStr], Field(description="the access path to the payload.")] = None,
        storage_name: Annotated[Optional[StrictStr], Field(description="the name of the configured storage volume (name or ID required)")] = None,
        storage_id: Annotated[Optional[StrictStr], Field(description="the ID of the configured storage.")] = None,
        item_format: Annotated[Optional[StrictStr], Field(description="format of the data item")] = None,
        eb_id: Annotated[Optional[StrictStr], Field(description="execution block ID provided by the client")] = None,
        authorization: Annotated[Optional[StrictStr], Field(description="Validated Bearer token with UserInfo")] = None,
        body: Optional[Dict[str, Any]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Register Data Item

        Ingest a data_item (register function is an alias).  This high level function is a combination of init_data_item, set_uri and set_state(READY). It also checks whether a data_item is already registered on the requested storage.  (1) check whether requested storage is known and accessible (2) check whether item is accessible/exists on that storage (3) check whether item is already registered on that storage (4) initialize the new item with the same OID on the new storage (5) set state to READY (6) generate metadata (7) notify the data dashboard

        :param item_name: could be empty, in which case the first 1000 items are returned (required)
        :type item_name: str
        :param uri: the access path to the payload.
        :type uri: str
        :param storage_name: the name of the configured storage volume (name or ID required)
        :type storage_name: str
        :param storage_id: the ID of the configured storage.
        :type storage_id: str
        :param item_format: format of the data item
        :type item_format: str
        :param eb_id: execution block ID provided by the client
        :type eb_id: str
        :param authorization: Validated Bearer token with UserInfo
        :type authorization: str
        :param body:
        :type body: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._register_data_item_ingest_register_data_item_post_serialize(
            item_name=item_name,
            uri=uri,
            storage_name=storage_name,
            storage_id=storage_id,
            item_format=item_format,
            eb_id=eb_id,
            authorization=authorization,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _register_data_item_ingest_register_data_item_post_serialize(
        self,
        item_name,
        uri,
        storage_name,
        storage_id,
        item_format,
        eb_id,
        authorization,
        body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if item_name is not None:
            
            _query_params.append(('item_name', item_name))
            
        if uri is not None:
            
            _query_params.append(('uri', uri))
            
        if storage_name is not None:
            
            _query_params.append(('storage_name', storage_name))
            
        if storage_id is not None:
            
            _query_params.append(('storage_id', storage_id))
            
        if item_format is not None:
            
            _query_params.append(('item_format', item_format))
            
        if eb_id is not None:
            
            _query_params.append(('eb_id', eb_id))
            
        # process the header parameters
        if authorization is not None:
            _header_params['authorization'] = authorization
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/ingest/register_data_item',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


