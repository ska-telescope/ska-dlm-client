# coding: utf-8

"""merged spec

merged spec

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""
# noqa: E501

import warnings
from typing import Any, Dict, List, Optional, Tuple, Union

from pydantic import (
    Field,
    StrictBool,
    StrictFloat,
    StrictInt,
    StrictStr,
    field_validator,
    validate_call,
)
from typing_extensions import Annotated

from ska_dlm_client.openapi.api_client import ApiClient, RequestSerialized
from ska_dlm_client.openapi.api_response import ApiResponse
from ska_dlm_client.openapi.rest import RESTResponseType


class StorageApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def create_rclone_config(
        self,
        request_body: Dict[str, Any],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> bool:
        """Create Rclone Config

        Create a new rclone backend configuration entry on the rclone server.

        Parameters
        ----------
        request_body : Dict[str, object]
            (required)
        _request_timeout : int, tuple(int, int), optional
            timeout setting for this request. If one number provided, it
            will be total request timeout. It can also be a pair (tuple)
            of (connection, read) timeouts.
        _request_auth : dict, optional
            set to override the auth_settings for an a single request;
            this effectively ignores the authentication in the spec for
            a single request.
        _content_type : str, Optional
            force content-type for the request.
        _headers : dict, optional
            set to override the headers for a single request; this
            effectively ignores the headers in the spec for a single
            request.
        _host_index : int, optional
            set to override the host_index for a single request; this
            effectively ignores the host_index in the spec for a single
            request.

        Returns
        -------
        unknown
            Returns the result object.
        """
        # noqa: E501

        _param = self._create_rclone_config_serialize(
            request_body=request_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "bool",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def create_rclone_config_with_http_info(
        self,
        request_body: Dict[str, Any],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[bool]:
        """Create Rclone Config

        Create a new rclone backend configuration entry on the rclone server.

        Parameters
        ----------
        request_body : Dict[str, object]
            (required)
        _request_timeout : int, tuple(int, int), optional
            timeout setting for this request. If one number provided, it
            will be total request timeout. It can also be a pair (tuple)
            of (connection, read) timeouts.
        _request_auth : dict, optional
            set to override the auth_settings for an a single request;
            this effectively ignores the authentication in the spec for
            a single request.
        _content_type : str, Optional
            force content-type for the request.
        _headers : dict, optional
            set to override the headers for a single request; this
            effectively ignores the headers in the spec for a single
            request.
        _host_index : int, optional
            set to override the host_index for a single request; this
            effectively ignores the host_index in the spec for a single
            request.

        Returns
        -------
        unknown
            Returns the result object.
        """
        # noqa: E501

        _param = self._create_rclone_config_serialize(
            request_body=request_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "bool",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def create_rclone_config_without_preload_content(
        self,
        request_body: Dict[str, Any],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create Rclone Config

        Create a new rclone backend configuration entry on the rclone server.

        Parameters
        ----------
        request_body : Dict[str, object]
            (required)
        _request_timeout : int, tuple(int, int), optional
            timeout setting for this request. If one number provided, it
            will be total request timeout. It can also be a pair (tuple)
            of (connection, read) timeouts.
        _request_auth : dict, optional
            set to override the auth_settings for an a single request;
            this effectively ignores the authentication in the spec for
            a single request.
        _content_type : str, Optional
            force content-type for the request.
        _headers : dict, optional
            set to override the headers for a single request; this
            effectively ignores the headers in the spec for a single
            request.
        _host_index : int, optional
            set to override the host_index for a single request; this
            effectively ignores the host_index in the spec for a single
            request.

        Returns
        -------
        unknown
            Returns the result object.
        """
        # noqa: E501

        _param = self._create_rclone_config_serialize(
            request_body=request_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "bool",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _create_rclone_config_serialize(
        self,
        request_body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if request_body is not None:
            _body_params = request_body

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/json"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/storage/rclone_config",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def create_storage_config(
        self,
        request_body: Dict[str, Any],
        storage_id: Annotated[
            Optional[StrictStr], Field(description="the storage_id for which to create the entry.")
        ] = None,
        storage_name: Annotated[
            Optional[StrictStr],
            Field(description="the name of the storage for which the config is provided."),
        ] = None,
        config_type: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Create Storage Config

        Create a new record in the storage_config table for a given storage_id.

        Parameters
        ----------
        request_body : Dict[str, object]
            (required)
        storage_id : str
            the storage_id for which to create the entry.
        storage_name : str
            the name of the storage for which the config is provided.
        config_type : str
        _request_timeout : int, tuple(int, int), optional
            timeout setting for this request. If one number provided, it
            will be total request timeout. It can also be a pair (tuple)
            of (connection, read) timeouts.
        _request_auth : dict, optional
            set to override the auth_settings for an a single request;
            this effectively ignores the authentication in the spec for
            a single request.
        _content_type : str, Optional
            force content-type for the request.
        _headers : dict, optional
            set to override the headers for a single request; this
            effectively ignores the headers in the spec for a single
            request.
        _host_index : int, optional
            set to override the host_index for a single request; this
            effectively ignores the host_index in the spec for a single
            request.

        Returns
        -------
        unknown
            Returns the result object.
        """
        # noqa: E501

        _param = self._create_storage_config_serialize(
            request_body=request_body,
            storage_id=storage_id,
            storage_name=storage_name,
            config_type=config_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "str",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def create_storage_config_with_http_info(
        self,
        request_body: Dict[str, Any],
        storage_id: Annotated[
            Optional[StrictStr], Field(description="the storage_id for which to create the entry.")
        ] = None,
        storage_name: Annotated[
            Optional[StrictStr],
            Field(description="the name of the storage for which the config is provided."),
        ] = None,
        config_type: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Create Storage Config

        Create a new record in the storage_config table for a given storage_id.

        Parameters
        ----------
        request_body : Dict[str, object]
            (required)
        storage_id : str
            the storage_id for which to create the entry.
        storage_name : str
            the name of the storage for which the config is provided.
        config_type : str
        _request_timeout : int, tuple(int, int), optional
            timeout setting for this request. If one number provided, it
            will be total request timeout. It can also be a pair (tuple)
            of (connection, read) timeouts.
        _request_auth : dict, optional
            set to override the auth_settings for an a single request;
            this effectively ignores the authentication in the spec for
            a single request.
        _content_type : str, Optional
            force content-type for the request.
        _headers : dict, optional
            set to override the headers for a single request; this
            effectively ignores the headers in the spec for a single
            request.
        _host_index : int, optional
            set to override the host_index for a single request; this
            effectively ignores the host_index in the spec for a single
            request.

        Returns
        -------
        unknown
            Returns the result object.
        """
        # noqa: E501

        _param = self._create_storage_config_serialize(
            request_body=request_body,
            storage_id=storage_id,
            storage_name=storage_name,
            config_type=config_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "str",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def create_storage_config_without_preload_content(
        self,
        request_body: Dict[str, Any],
        storage_id: Annotated[
            Optional[StrictStr], Field(description="the storage_id for which to create the entry.")
        ] = None,
        storage_name: Annotated[
            Optional[StrictStr],
            Field(description="the name of the storage for which the config is provided."),
        ] = None,
        config_type: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create Storage Config

        Create a new record in the storage_config table for a given storage_id.

        Parameters
        ----------
        request_body : Dict[str, object]
            (required)
        storage_id : str
            the storage_id for which to create the entry.
        storage_name : str
            the name of the storage for which the config is provided.
        config_type : str
        _request_timeout : int, tuple(int, int), optional
            timeout setting for this request. If one number provided, it
            will be total request timeout. It can also be a pair (tuple)
            of (connection, read) timeouts.
        _request_auth : dict, optional
            set to override the auth_settings for an a single request;
            this effectively ignores the authentication in the spec for
            a single request.
        _content_type : str, Optional
            force content-type for the request.
        _headers : dict, optional
            set to override the headers for a single request; this
            effectively ignores the headers in the spec for a single
            request.
        _host_index : int, optional
            set to override the host_index for a single request; this
            effectively ignores the host_index in the spec for a single
            request.

        Returns
        -------
        unknown
            Returns the result object.
        """
        # noqa: E501

        _param = self._create_storage_config_serialize(
            request_body=request_body,
            storage_id=storage_id,
            storage_name=storage_name,
            config_type=config_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "str",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _create_storage_config_serialize(
        self,
        request_body,
        storage_id,
        storage_name,
        config_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if storage_id is not None:

            _query_params.append(("storage_id", storage_id))

        if storage_name is not None:

            _query_params.append(("storage_name", storage_name))

        if config_type is not None:

            _query_params.append(("config_type", config_type))

        # process the header parameters
        # process the form parameters
        # process the body parameter
        if request_body is not None:
            _body_params = request_body

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/json"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/storage/create_storage_config",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_storage_config(
        self,
        storage_id: Annotated[
            Optional[StrictStr], Field(description='the storage id, by default ""')
        ] = None,
        storage_name: Annotated[
            Optional[StrictStr], Field(description='the name of the storage volume, by default ""')
        ] = None,
        config_type: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[Optional[Dict[str, object]]]:
        """Get Storage Config

        Get the storage configuration entry for a particular storage backend.

        Parameters
        ----------
        storage_id : str
            the storage id, by default \"\"
        storage_name : str
            the name of the storage volume, by default \"\"
        config_type : str
        _request_timeout : int, tuple(int, int), optional
            timeout setting for this request. If one number provided, it
            will be total request timeout. It can also be a pair (tuple)
            of (connection, read) timeouts.
        _request_auth : dict, optional
            set to override the auth_settings for an a single request;
            this effectively ignores the authentication in the spec for
            a single request.
        _content_type : str, Optional
            force content-type for the request.
        _headers : dict, optional
            set to override the headers for a single request; this
            effectively ignores the headers in the spec for a single
            request.
        _host_index : int, optional
            set to override the host_index for a single request; this
            effectively ignores the host_index in the spec for a single
            request.

        Returns
        -------
        unknown
            Returns the result object.
        """
        # noqa: E501

        _param = self._get_storage_config_serialize(
            storage_id=storage_id,
            storage_name=storage_name,
            config_type=config_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "List[Optional[Dict[str, object]]]",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_storage_config_with_http_info(
        self,
        storage_id: Annotated[
            Optional[StrictStr], Field(description='the storage id, by default ""')
        ] = None,
        storage_name: Annotated[
            Optional[StrictStr], Field(description='the name of the storage volume, by default ""')
        ] = None,
        config_type: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[Optional[Dict[str, object]]]]:
        """Get Storage Config

        Get the storage configuration entry for a particular storage backend.

        Parameters
        ----------
        storage_id : str
            the storage id, by default \"\"
        storage_name : str
            the name of the storage volume, by default \"\"
        config_type : str
        _request_timeout : int, tuple(int, int), optional
            timeout setting for this request. If one number provided, it
            will be total request timeout. It can also be a pair (tuple)
            of (connection, read) timeouts.
        _request_auth : dict, optional
            set to override the auth_settings for an a single request;
            this effectively ignores the authentication in the spec for
            a single request.
        _content_type : str, Optional
            force content-type for the request.
        _headers : dict, optional
            set to override the headers for a single request; this
            effectively ignores the headers in the spec for a single
            request.
        _host_index : int, optional
            set to override the host_index for a single request; this
            effectively ignores the host_index in the spec for a single
            request.

        Returns
        -------
        unknown
            Returns the result object.
        """
        # noqa: E501

        _param = self._get_storage_config_serialize(
            storage_id=storage_id,
            storage_name=storage_name,
            config_type=config_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "List[Optional[Dict[str, object]]]",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_storage_config_without_preload_content(
        self,
        storage_id: Annotated[
            Optional[StrictStr], Field(description='the storage id, by default ""')
        ] = None,
        storage_name: Annotated[
            Optional[StrictStr], Field(description='the name of the storage volume, by default ""')
        ] = None,
        config_type: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Storage Config

        Get the storage configuration entry for a particular storage backend.

        Parameters
        ----------
        storage_id : str
            the storage id, by default \"\"
        storage_name : str
            the name of the storage volume, by default \"\"
        config_type : str
        _request_timeout : int, tuple(int, int), optional
            timeout setting for this request. If one number provided, it
            will be total request timeout. It can also be a pair (tuple)
            of (connection, read) timeouts.
        _request_auth : dict, optional
            set to override the auth_settings for an a single request;
            this effectively ignores the authentication in the spec for
            a single request.
        _content_type : str, Optional
            force content-type for the request.
        _headers : dict, optional
            set to override the headers for a single request; this
            effectively ignores the headers in the spec for a single
            request.
        _host_index : int, optional
            set to override the host_index for a single request; this
            effectively ignores the host_index in the spec for a single
            request.

        Returns
        -------
        unknown
            Returns the result object.
        """
        # noqa: E501

        _param = self._get_storage_config_serialize(
            storage_id=storage_id,
            storage_name=storage_name,
            config_type=config_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "List[Optional[Dict[str, object]]]",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _get_storage_config_serialize(
        self,
        storage_id,
        storage_name,
        config_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if storage_id is not None:

            _query_params.append(("storage_id", storage_id))

        if storage_name is not None:

            _query_params.append(("storage_name", storage_name))

        if config_type is not None:

            _query_params.append(("config_type", config_type))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/storage/get_storage_config",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def init_location(
        self,
        location_name: Annotated[
            StrictStr,
            Field(description="the orgization or owner's name managing the storage location."),
        ],
        location_type: StrictStr,
        location_country: Optional[StrictStr] = None,
        location_city: Annotated[
            Optional[StrictStr], Field(description="the location city name")
        ] = None,
        location_facility: Annotated[
            Optional[StrictStr],
            Field(description="the location facility name, from table location_facility"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Init Location

        Initialise a new location for a storage by specifying the location_name and location_type.

        Parameters
        ----------
        location_name : str
            the orgization or owner's name managing the storage
            location. (required)
        location_type : str
            (required)
        location_country : str
        location_city : str
            the location city name
        location_facility : str
            the location facility name, from table location_facility
        _request_timeout : int, tuple(int, int), optional
            timeout setting for this request. If one number provided, it
            will be total request timeout. It can also be a pair (tuple)
            of (connection, read) timeouts.
        _request_auth : dict, optional
            set to override the auth_settings for an a single request;
            this effectively ignores the authentication in the spec for
            a single request.
        _content_type : str, Optional
            force content-type for the request.
        _headers : dict, optional
            set to override the headers for a single request; this
            effectively ignores the headers in the spec for a single
            request.
        _host_index : int, optional
            set to override the host_index for a single request; this
            effectively ignores the host_index in the spec for a single
            request.

        Returns
        -------
        unknown
            Returns the result object.
        """
        # noqa: E501

        _param = self._init_location_serialize(
            location_name=location_name,
            location_type=location_type,
            location_country=location_country,
            location_city=location_city,
            location_facility=location_facility,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "str",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def init_location_with_http_info(
        self,
        location_name: Annotated[
            StrictStr,
            Field(description="the orgization or owner's name managing the storage location."),
        ],
        location_type: StrictStr,
        location_country: Optional[StrictStr] = None,
        location_city: Annotated[
            Optional[StrictStr], Field(description="the location city name")
        ] = None,
        location_facility: Annotated[
            Optional[StrictStr],
            Field(description="the location facility name, from table location_facility"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Init Location

        Initialise a new location for a storage by specifying the location_name and location_type.

        Parameters
        ----------
        location_name : str
            the orgization or owner's name managing the storage
            location. (required)
        location_type : str
            (required)
        location_country : str
        location_city : str
            the location city name
        location_facility : str
            the location facility name, from table location_facility
        _request_timeout : int, tuple(int, int), optional
            timeout setting for this request. If one number provided, it
            will be total request timeout. It can also be a pair (tuple)
            of (connection, read) timeouts.
        _request_auth : dict, optional
            set to override the auth_settings for an a single request;
            this effectively ignores the authentication in the spec for
            a single request.
        _content_type : str, Optional
            force content-type for the request.
        _headers : dict, optional
            set to override the headers for a single request; this
            effectively ignores the headers in the spec for a single
            request.
        _host_index : int, optional
            set to override the host_index for a single request; this
            effectively ignores the host_index in the spec for a single
            request.

        Returns
        -------
        unknown
            Returns the result object.
        """
        # noqa: E501

        _param = self._init_location_serialize(
            location_name=location_name,
            location_type=location_type,
            location_country=location_country,
            location_city=location_city,
            location_facility=location_facility,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "str",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def init_location_without_preload_content(
        self,
        location_name: Annotated[
            StrictStr,
            Field(description="the orgization or owner's name managing the storage location."),
        ],
        location_type: StrictStr,
        location_country: Optional[StrictStr] = None,
        location_city: Annotated[
            Optional[StrictStr], Field(description="the location city name")
        ] = None,
        location_facility: Annotated[
            Optional[StrictStr],
            Field(description="the location facility name, from table location_facility"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Init Location

        Initialise a new location for a storage by specifying the location_name and location_type.

        Parameters
        ----------
        location_name : str
            the orgization or owner's name managing the storage
            location. (required)
        location_type : str
            (required)
        location_country : str
        location_city : str
            the location city name
        location_facility : str
            the location facility name, from table location_facility
        _request_timeout : int, tuple(int, int), optional
            timeout setting for this request. If one number provided, it
            will be total request timeout. It can also be a pair (tuple)
            of (connection, read) timeouts.
        _request_auth : dict, optional
            set to override the auth_settings for an a single request;
            this effectively ignores the authentication in the spec for
            a single request.
        _content_type : str, Optional
            force content-type for the request.
        _headers : dict, optional
            set to override the headers for a single request; this
            effectively ignores the headers in the spec for a single
            request.
        _host_index : int, optional
            set to override the host_index for a single request; this
            effectively ignores the host_index in the spec for a single
            request.

        Returns
        -------
        unknown
            Returns the result object.
        """
        # noqa: E501

        _param = self._init_location_serialize(
            location_name=location_name,
            location_type=location_type,
            location_country=location_country,
            location_city=location_city,
            location_facility=location_facility,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "str",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _init_location_serialize(
        self,
        location_name,
        location_type,
        location_country,
        location_city,
        location_facility,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if location_name is not None:

            _query_params.append(("location_name", location_name))

        if location_type is not None:

            _query_params.append(("location_type", location_type))

        if location_country is not None:

            _query_params.append(("location_country", location_country))

        if location_city is not None:

            _query_params.append(("location_city", location_city))

        if location_facility is not None:

            _query_params.append(("location_facility", location_facility))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/storage/init_location",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def init_storage(
        self,
        storage_name: Annotated[
            StrictStr, Field(description="An organisation or owner name for the storage.")
        ],
        storage_type: StrictStr,
        root_directory: Annotated[
            StrictStr,
            Field(description="data directory as an absolute path on the remote storage endpoint"),
        ],
        storage_interface: StrictStr,
        location_id: Annotated[
            Optional[StrictStr], Field(description="a dlm registered location id")
        ] = None,
        location_name: Annotated[
            Optional[StrictStr], Field(description="a dlm registered location name")
        ] = None,
        storage_capacity: Annotated[
            Optional[StrictInt], Field(description="reserved storage capacity in bytes")
        ] = None,
        storage_phase: Optional[StrictStr] = None,
        request_body: Optional[Dict[str, Any]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Init Storage

        Initialise a new storage. Either location_id or location_name is required.

        Parameters
        ----------
        storage_name : str
            An organisation or owner name for the storage. (required)
        storage_type : str
            (required)
        root_directory : str
            data directory as an absolute path on the remote storage
            endpoint (required)
        storage_interface : str
            (required)
        location_id : str
            a dlm registered location id
        location_name : str
            a dlm registered location name
        storage_capacity : int
            reserved storage capacity in bytes
        storage_phase : str
        request_body : Dict[str, object]
        _request_timeout : int, tuple(int, int), optional
            timeout setting for this request. If one number provided, it
            will be total request timeout. It can also be a pair (tuple)
            of (connection, read) timeouts.
        _request_auth : dict, optional
            set to override the auth_settings for an a single request;
            this effectively ignores the authentication in the spec for
            a single request.
        _content_type : str, Optional
            force content-type for the request.
        _headers : dict, optional
            set to override the headers for a single request; this
            effectively ignores the headers in the spec for a single
            request.
        _host_index : int, optional
            set to override the host_index for a single request; this
            effectively ignores the host_index in the spec for a single
            request.

        Returns
        -------
        unknown
            Returns the result object.
        """
        # noqa: E501

        _param = self._init_storage_serialize(
            storage_name=storage_name,
            storage_type=storage_type,
            root_directory=root_directory,
            storage_interface=storage_interface,
            location_id=location_id,
            location_name=location_name,
            storage_capacity=storage_capacity,
            storage_phase=storage_phase,
            request_body=request_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "str",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def init_storage_with_http_info(
        self,
        storage_name: Annotated[
            StrictStr, Field(description="An organisation or owner name for the storage.")
        ],
        storage_type: StrictStr,
        root_directory: Annotated[
            StrictStr,
            Field(description="data directory as an absolute path on the remote storage endpoint"),
        ],
        storage_interface: StrictStr,
        location_id: Annotated[
            Optional[StrictStr], Field(description="a dlm registered location id")
        ] = None,
        location_name: Annotated[
            Optional[StrictStr], Field(description="a dlm registered location name")
        ] = None,
        storage_capacity: Annotated[
            Optional[StrictInt], Field(description="reserved storage capacity in bytes")
        ] = None,
        storage_phase: Optional[StrictStr] = None,
        request_body: Optional[Dict[str, Any]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Init Storage

        Initialise a new storage. Either location_id or location_name is required.

        Parameters
        ----------
        storage_name : str
            An organisation or owner name for the storage. (required)
        storage_type : str
            (required)
        root_directory : str
            data directory as an absolute path on the remote storage
            endpoint (required)
        storage_interface : str
            (required)
        location_id : str
            a dlm registered location id
        location_name : str
            a dlm registered location name
        storage_capacity : int
            reserved storage capacity in bytes
        storage_phase : str
        request_body : Dict[str, object]
        _request_timeout : int, tuple(int, int), optional
            timeout setting for this request. If one number provided, it
            will be total request timeout. It can also be a pair (tuple)
            of (connection, read) timeouts.
        _request_auth : dict, optional
            set to override the auth_settings for an a single request;
            this effectively ignores the authentication in the spec for
            a single request.
        _content_type : str, Optional
            force content-type for the request.
        _headers : dict, optional
            set to override the headers for a single request; this
            effectively ignores the headers in the spec for a single
            request.
        _host_index : int, optional
            set to override the host_index for a single request; this
            effectively ignores the host_index in the spec for a single
            request.

        Returns
        -------
        unknown
            Returns the result object.
        """
        # noqa: E501

        _param = self._init_storage_serialize(
            storage_name=storage_name,
            storage_type=storage_type,
            root_directory=root_directory,
            storage_interface=storage_interface,
            location_id=location_id,
            location_name=location_name,
            storage_capacity=storage_capacity,
            storage_phase=storage_phase,
            request_body=request_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "str",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def init_storage_without_preload_content(
        self,
        storage_name: Annotated[
            StrictStr, Field(description="An organisation or owner name for the storage.")
        ],
        storage_type: StrictStr,
        root_directory: Annotated[
            StrictStr,
            Field(description="data directory as an absolute path on the remote storage endpoint"),
        ],
        storage_interface: StrictStr,
        location_id: Annotated[
            Optional[StrictStr], Field(description="a dlm registered location id")
        ] = None,
        location_name: Annotated[
            Optional[StrictStr], Field(description="a dlm registered location name")
        ] = None,
        storage_capacity: Annotated[
            Optional[StrictInt], Field(description="reserved storage capacity in bytes")
        ] = None,
        storage_phase: Optional[StrictStr] = None,
        request_body: Optional[Dict[str, Any]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Init Storage

        Initialise a new storage. Either location_id or location_name is required.

        Parameters
        ----------
        storage_name : str
            An organisation or owner name for the storage. (required)
        storage_type : str
            (required)
        root_directory : str
            data directory as an absolute path on the remote storage
            endpoint (required)
        storage_interface : str
            (required)
        location_id : str
            a dlm registered location id
        location_name : str
            a dlm registered location name
        storage_capacity : int
            reserved storage capacity in bytes
        storage_phase : str
        request_body : Dict[str, object]
        _request_timeout : int, tuple(int, int), optional
            timeout setting for this request. If one number provided, it
            will be total request timeout. It can also be a pair (tuple)
            of (connection, read) timeouts.
        _request_auth : dict, optional
            set to override the auth_settings for an a single request;
            this effectively ignores the authentication in the spec for
            a single request.
        _content_type : str, Optional
            force content-type for the request.
        _headers : dict, optional
            set to override the headers for a single request; this
            effectively ignores the headers in the spec for a single
            request.
        _host_index : int, optional
            set to override the host_index for a single request; this
            effectively ignores the host_index in the spec for a single
            request.

        Returns
        -------
        unknown
            Returns the result object.
        """
        # noqa: E501

        _param = self._init_storage_serialize(
            storage_name=storage_name,
            storage_type=storage_type,
            root_directory=root_directory,
            storage_interface=storage_interface,
            location_id=location_id,
            location_name=location_name,
            storage_capacity=storage_capacity,
            storage_phase=storage_phase,
            request_body=request_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "str",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _init_storage_serialize(
        self,
        storage_name,
        storage_type,
        root_directory,
        storage_interface,
        location_id,
        location_name,
        storage_capacity,
        storage_phase,
        request_body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if storage_name is not None:

            _query_params.append(("storage_name", storage_name))

        if storage_type is not None:

            _query_params.append(("storage_type", storage_type))

        if root_directory is not None:

            _query_params.append(("root_directory", root_directory))

        if storage_interface is not None:

            _query_params.append(("storage_interface", storage_interface))

        if location_id is not None:

            _query_params.append(("location_id", location_id))

        if location_name is not None:

            _query_params.append(("location_name", location_name))

        if storage_capacity is not None:

            _query_params.append(("storage_capacity", storage_capacity))

        if storage_phase is not None:

            _query_params.append(("storage_phase", storage_phase))

        # process the header parameters
        # process the form parameters
        # process the body parameter
        if request_body is not None:
            _body_params = request_body

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/json"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/storage/init_storage",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def query_location(
        self,
        location_name: Annotated[
            Optional[StrictStr],
            Field(description="could be empty, in which case the first 1000 items are returned"),
        ] = None,
        location_id: Annotated[
            Optional[StrictStr],
            Field(description="Return locations referred to by the location_id provided."),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[Optional[Dict[str, object]]]:
        """Query Location

        Query a location.

        Parameters
        ----------
        location_name : str
            could be empty, in which case the first 1000 items are
            returned
        location_id : str
            Return locations referred to by the location_id provided.
        _request_timeout : int, tuple(int, int), optional
            timeout setting for this request. If one number provided, it
            will be total request timeout. It can also be a pair (tuple)
            of (connection, read) timeouts.
        _request_auth : dict, optional
            set to override the auth_settings for an a single request;
            this effectively ignores the authentication in the spec for
            a single request.
        _content_type : str, Optional
            force content-type for the request.
        _headers : dict, optional
            set to override the headers for a single request; this
            effectively ignores the headers in the spec for a single
            request.
        _host_index : int, optional
            set to override the host_index for a single request; this
            effectively ignores the host_index in the spec for a single
            request.

        Returns
        -------
        unknown
            Returns the result object.
        """
        # noqa: E501

        _param = self._query_location_serialize(
            location_name=location_name,
            location_id=location_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "List[Optional[Dict[str, object]]]",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def query_location_with_http_info(
        self,
        location_name: Annotated[
            Optional[StrictStr],
            Field(description="could be empty, in which case the first 1000 items are returned"),
        ] = None,
        location_id: Annotated[
            Optional[StrictStr],
            Field(description="Return locations referred to by the location_id provided."),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[Optional[Dict[str, object]]]]:
        """Query Location

        Query a location.

        Parameters
        ----------
        location_name : str
            could be empty, in which case the first 1000 items are
            returned
        location_id : str
            Return locations referred to by the location_id provided.
        _request_timeout : int, tuple(int, int), optional
            timeout setting for this request. If one number provided, it
            will be total request timeout. It can also be a pair (tuple)
            of (connection, read) timeouts.
        _request_auth : dict, optional
            set to override the auth_settings for an a single request;
            this effectively ignores the authentication in the spec for
            a single request.
        _content_type : str, Optional
            force content-type for the request.
        _headers : dict, optional
            set to override the headers for a single request; this
            effectively ignores the headers in the spec for a single
            request.
        _host_index : int, optional
            set to override the host_index for a single request; this
            effectively ignores the host_index in the spec for a single
            request.

        Returns
        -------
        unknown
            Returns the result object.
        """
        # noqa: E501

        _param = self._query_location_serialize(
            location_name=location_name,
            location_id=location_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "List[Optional[Dict[str, object]]]",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def query_location_without_preload_content(
        self,
        location_name: Annotated[
            Optional[StrictStr],
            Field(description="could be empty, in which case the first 1000 items are returned"),
        ] = None,
        location_id: Annotated[
            Optional[StrictStr],
            Field(description="Return locations referred to by the location_id provided."),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Query Location

        Query a location.

        Parameters
        ----------
        location_name : str
            could be empty, in which case the first 1000 items are
            returned
        location_id : str
            Return locations referred to by the location_id provided.
        _request_timeout : int, tuple(int, int), optional
            timeout setting for this request. If one number provided, it
            will be total request timeout. It can also be a pair (tuple)
            of (connection, read) timeouts.
        _request_auth : dict, optional
            set to override the auth_settings for an a single request;
            this effectively ignores the authentication in the spec for
            a single request.
        _content_type : str, Optional
            force content-type for the request.
        _headers : dict, optional
            set to override the headers for a single request; this
            effectively ignores the headers in the spec for a single
            request.
        _host_index : int, optional
            set to override the host_index for a single request; this
            effectively ignores the host_index in the spec for a single
            request.

        Returns
        -------
        unknown
            Returns the result object.
        """
        # noqa: E501

        _param = self._query_location_serialize(
            location_name=location_name,
            location_id=location_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "List[Optional[Dict[str, object]]]",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _query_location_serialize(
        self,
        location_name,
        location_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if location_name is not None:

            _query_params.append(("location_name", location_name))

        if location_id is not None:

            _query_params.append(("location_id", location_id))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/storage/query_location",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def query_location_facility(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[Optional[str]]:
        """Query Location Facility

        Query the location_facility table for valid facilities.

        Parameters
        ----------
        _request_timeout : int, tuple(int, int), optional
            timeout setting for this request. If one number provided, it
            will be total request timeout. It can also be a pair (tuple)
            of (connection, read) timeouts.
        _request_auth : dict, optional
            set to override the auth_settings for an a single request;
            this effectively ignores the authentication in the spec for
            a single request.
        _content_type : str, Optional
            force content-type for the request.
        _headers : dict, optional
            set to override the headers for a single request; this
            effectively ignores the headers in the spec for a single
            request.
        _host_index : int, optional
            set to override the host_index for a single request; this
            effectively ignores the host_index in the spec for a single
            request.

        Returns
        -------
        unknown
            Returns the result object.
        """
        # noqa: E501

        _param = self._query_location_facility_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "List[Optional[str]]",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def query_location_facility_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[Optional[str]]]:
        """Query Location Facility

        Query the location_facility table for valid facilities.

        Parameters
        ----------
        _request_timeout : int, tuple(int, int), optional
            timeout setting for this request. If one number provided, it
            will be total request timeout. It can also be a pair (tuple)
            of (connection, read) timeouts.
        _request_auth : dict, optional
            set to override the auth_settings for an a single request;
            this effectively ignores the authentication in the spec for
            a single request.
        _content_type : str, Optional
            force content-type for the request.
        _headers : dict, optional
            set to override the headers for a single request; this
            effectively ignores the headers in the spec for a single
            request.
        _host_index : int, optional
            set to override the host_index for a single request; this
            effectively ignores the host_index in the spec for a single
            request.

        Returns
        -------
        unknown
            Returns the result object.
        """
        # noqa: E501

        _param = self._query_location_facility_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "List[Optional[str]]",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def query_location_facility_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Query Location Facility

        Query the location_facility table for valid facilities.

        Parameters
        ----------
        _request_timeout : int, tuple(int, int), optional
            timeout setting for this request. If one number provided, it
            will be total request timeout. It can also be a pair (tuple)
            of (connection, read) timeouts.
        _request_auth : dict, optional
            set to override the auth_settings for an a single request;
            this effectively ignores the authentication in the spec for
            a single request.
        _content_type : str, Optional
            force content-type for the request.
        _headers : dict, optional
            set to override the headers for a single request; this
            effectively ignores the headers in the spec for a single
            request.
        _host_index : int, optional
            set to override the host_index for a single request; this
            effectively ignores the host_index in the spec for a single
            request.

        Returns
        -------
        unknown
            Returns the result object.
        """
        # noqa: E501

        _param = self._query_location_facility_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "List[Optional[str]]",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _query_location_facility_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/storage/query_location_facility",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def query_storage(
        self,
        storage_name: Annotated[
            Optional[StrictStr],
            Field(
                description="Name of the storage to query. If not provided, the first 1000 locations are returned."
            ),
        ] = None,
        storage_id: Annotated[
            Optional[StrictStr],
            Field(description="ID of the storage to query. Ignored if storage_name is provided."),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[Optional[Dict[str, object]]]:
        """Query Storage

        Query storage locations.

        Parameters
        ----------
        storage_name : str
            Name of the storage to query. If not provided, the first
            1000 locations are returned.
        storage_id : str
            ID of the storage to query. Ignored if storage_name is
            provided.
        _request_timeout : int, tuple(int, int), optional
            timeout setting for this request. If one number provided, it
            will be total request timeout. It can also be a pair (tuple)
            of (connection, read) timeouts.
        _request_auth : dict, optional
            set to override the auth_settings for an a single request;
            this effectively ignores the authentication in the spec for
            a single request.
        _content_type : str, Optional
            force content-type for the request.
        _headers : dict, optional
            set to override the headers for a single request; this
            effectively ignores the headers in the spec for a single
            request.
        _host_index : int, optional
            set to override the host_index for a single request; this
            effectively ignores the host_index in the spec for a single
            request.

        Returns
        -------
        unknown
            Returns the result object.
        """
        # noqa: E501

        _param = self._query_storage_serialize(
            storage_name=storage_name,
            storage_id=storage_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "List[Optional[Dict[str, object]]]",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def query_storage_with_http_info(
        self,
        storage_name: Annotated[
            Optional[StrictStr],
            Field(
                description="Name of the storage to query. If not provided, the first 1000 locations are returned."
            ),
        ] = None,
        storage_id: Annotated[
            Optional[StrictStr],
            Field(description="ID of the storage to query. Ignored if storage_name is provided."),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[Optional[Dict[str, object]]]]:
        """Query Storage

        Query storage locations.

        Parameters
        ----------
        storage_name : str
            Name of the storage to query. If not provided, the first
            1000 locations are returned.
        storage_id : str
            ID of the storage to query. Ignored if storage_name is
            provided.
        _request_timeout : int, tuple(int, int), optional
            timeout setting for this request. If one number provided, it
            will be total request timeout. It can also be a pair (tuple)
            of (connection, read) timeouts.
        _request_auth : dict, optional
            set to override the auth_settings for an a single request;
            this effectively ignores the authentication in the spec for
            a single request.
        _content_type : str, Optional
            force content-type for the request.
        _headers : dict, optional
            set to override the headers for a single request; this
            effectively ignores the headers in the spec for a single
            request.
        _host_index : int, optional
            set to override the host_index for a single request; this
            effectively ignores the host_index in the spec for a single
            request.

        Returns
        -------
        unknown
            Returns the result object.
        """
        # noqa: E501

        _param = self._query_storage_serialize(
            storage_name=storage_name,
            storage_id=storage_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "List[Optional[Dict[str, object]]]",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def query_storage_without_preload_content(
        self,
        storage_name: Annotated[
            Optional[StrictStr],
            Field(
                description="Name of the storage to query. If not provided, the first 1000 locations are returned."
            ),
        ] = None,
        storage_id: Annotated[
            Optional[StrictStr],
            Field(description="ID of the storage to query. Ignored if storage_name is provided."),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Query Storage

        Query storage locations.

        Parameters
        ----------
        storage_name : str
            Name of the storage to query. If not provided, the first
            1000 locations are returned.
        storage_id : str
            ID of the storage to query. Ignored if storage_name is
            provided.
        _request_timeout : int, tuple(int, int), optional
            timeout setting for this request. If one number provided, it
            will be total request timeout. It can also be a pair (tuple)
            of (connection, read) timeouts.
        _request_auth : dict, optional
            set to override the auth_settings for an a single request;
            this effectively ignores the authentication in the spec for
            a single request.
        _content_type : str, Optional
            force content-type for the request.
        _headers : dict, optional
            set to override the headers for a single request; this
            effectively ignores the headers in the spec for a single
            request.
        _host_index : int, optional
            set to override the host_index for a single request; this
            effectively ignores the host_index in the spec for a single
            request.

        Returns
        -------
        unknown
            Returns the result object.
        """
        # noqa: E501

        _param = self._query_storage_serialize(
            storage_name=storage_name,
            storage_id=storage_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "List[Optional[Dict[str, object]]]",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _query_storage_serialize(
        self,
        storage_name,
        storage_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if storage_name is not None:

            _query_params.append(("storage_name", storage_name))

        if storage_id is not None:

            _query_params.append(("storage_id", storage_id))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/storage/query_storage",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
