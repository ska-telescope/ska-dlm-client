# coding: utf-8

"""merged spec

merged spec

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""
# noqa: E501

import warnings
from typing import Any, Dict, List, Optional, Tuple, Union

from pydantic import Field, StrictFloat, StrictInt, StrictStr, validate_call
from typing_extensions import Annotated

from ska_dlm_client.openapi.api_client import ApiClient, RequestSerialized
from ska_dlm_client.openapi.api_response import ApiResponse
from ska_dlm_client.openapi.rest import RESTResponseType


class GatewayApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def auth_callback_auth_callback_get(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Auth Callback

        Auth callback from Provider

        Parameters
        ----------
        _request_timeout : int, tuple(int, int), optional
            timeout setting for this request. If one number provided, it
            will be total request timeout. It can also be a pair (tuple)
            of (connection, read) timeouts.
        _request_auth : dict, optional
            set to override the auth_settings for an a single request;
            this effectively ignores the authentication in the spec for
            a single request.
        _content_type : str, Optional
            force content-type for the request.
        _headers : dict, optional
            set to override the headers for a single request; this
            effectively ignores the headers in the spec for a single
            request.
        _host_index : int, optional
            set to override the host_index for a single request; this
            effectively ignores the host_index in the spec for a single
            request.

        Returns
        -------
        unknown
            Returns the result object.
        """
        # noqa: E501

        _param = self._auth_callback_auth_callback_get_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "object",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def auth_callback_auth_callback_get_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Auth Callback

        Auth callback from Provider

        Parameters
        ----------
        _request_timeout : int, tuple(int, int), optional
            timeout setting for this request. If one number provided, it
            will be total request timeout. It can also be a pair (tuple)
            of (connection, read) timeouts.
        _request_auth : dict, optional
            set to override the auth_settings for an a single request;
            this effectively ignores the authentication in the spec for
            a single request.
        _content_type : str, Optional
            force content-type for the request.
        _headers : dict, optional
            set to override the headers for a single request; this
            effectively ignores the headers in the spec for a single
            request.
        _host_index : int, optional
            set to override the host_index for a single request; this
            effectively ignores the host_index in the spec for a single
            request.

        Returns
        -------
        unknown
            Returns the result object.
        """
        # noqa: E501

        _param = self._auth_callback_auth_callback_get_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "object",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def auth_callback_auth_callback_get_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Auth Callback

        Auth callback from Provider

        Parameters
        ----------
        _request_timeout : int, tuple(int, int), optional
            timeout setting for this request. If one number provided, it
            will be total request timeout. It can also be a pair (tuple)
            of (connection, read) timeouts.
        _request_auth : dict, optional
            set to override the auth_settings for an a single request;
            this effectively ignores the authentication in the spec for
            a single request.
        _content_type : str, Optional
            force content-type for the request.
        _headers : dict, optional
            set to override the headers for a single request; this
            effectively ignores the headers in the spec for a single
            request.
        _host_index : int, optional
            set to override the host_index for a single request; this
            effectively ignores the host_index in the spec for a single
            request.

        Returns
        -------
        unknown
            Returns the result object.
        """
        # noqa: E501

        _param = self._auth_callback_auth_callback_get_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "object",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _auth_callback_auth_callback_get_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/auth_callback",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def end_session_end_session_post(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """End Session

        End client session

        Parameters
        ----------
        _request_timeout : int, tuple(int, int), optional
            timeout setting for this request. If one number provided, it
            will be total request timeout. It can also be a pair (tuple)
            of (connection, read) timeouts.
        _request_auth : dict, optional
            set to override the auth_settings for an a single request;
            this effectively ignores the authentication in the spec for
            a single request.
        _content_type : str, Optional
            force content-type for the request.
        _headers : dict, optional
            set to override the headers for a single request; this
            effectively ignores the headers in the spec for a single
            request.
        _host_index : int, optional
            set to override the host_index for a single request; this
            effectively ignores the host_index in the spec for a single
            request.

        Returns
        -------
        unknown
            Returns the result object.
        """
        # noqa: E501

        _param = self._end_session_end_session_post_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "object",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def end_session_end_session_post_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """End Session

        End client session

        Parameters
        ----------
        _request_timeout : int, tuple(int, int), optional
            timeout setting for this request. If one number provided, it
            will be total request timeout. It can also be a pair (tuple)
            of (connection, read) timeouts.
        _request_auth : dict, optional
            set to override the auth_settings for an a single request;
            this effectively ignores the authentication in the spec for
            a single request.
        _content_type : str, Optional
            force content-type for the request.
        _headers : dict, optional
            set to override the headers for a single request; this
            effectively ignores the headers in the spec for a single
            request.
        _host_index : int, optional
            set to override the host_index for a single request; this
            effectively ignores the host_index in the spec for a single
            request.

        Returns
        -------
        unknown
            Returns the result object.
        """
        # noqa: E501

        _param = self._end_session_end_session_post_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "object",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def end_session_end_session_post_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """End Session

        End client session

        Parameters
        ----------
        _request_timeout : int, tuple(int, int), optional
            timeout setting for this request. If one number provided, it
            will be total request timeout. It can also be a pair (tuple)
            of (connection, read) timeouts.
        _request_auth : dict, optional
            set to override the auth_settings for an a single request;
            this effectively ignores the authentication in the spec for
            a single request.
        _content_type : str, Optional
            force content-type for the request.
        _headers : dict, optional
            set to override the headers for a single request; this
            effectively ignores the headers in the spec for a single
            request.
        _host_index : int, optional
            set to override the host_index for a single request; this
            effectively ignores the host_index in the spec for a single
            request.

        Returns
        -------
        unknown
            Returns the result object.
        """
        # noqa: E501

        _param = self._end_session_end_session_post_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "object",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _end_session_end_session_post_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/end_session",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def has_scope_scope_get(
        self,
        token: StrictStr,
        permission: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Has Scope

        Get UMA scopes

        Parameters
        ----------
        token : str
            (required)
        permission : str
            (required)
        _request_timeout : int, tuple(int, int), optional
            timeout setting for this request. If one number provided, it
            will be total request timeout. It can also be a pair (tuple)
            of (connection, read) timeouts.
        _request_auth : dict, optional
            set to override the auth_settings for an a single request;
            this effectively ignores the authentication in the spec for
            a single request.
        _content_type : str, Optional
            force content-type for the request.
        _headers : dict, optional
            set to override the headers for a single request; this
            effectively ignores the headers in the spec for a single
            request.
        _host_index : int, optional
            set to override the host_index for a single request; this
            effectively ignores the host_index in the spec for a single
            request.

        Returns
        -------
        unknown
            Returns the result object.
        """
        # noqa: E501

        _param = self._has_scope_scope_get_serialize(
            token=token,
            permission=permission,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "object",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def has_scope_scope_get_with_http_info(
        self,
        token: StrictStr,
        permission: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Has Scope

        Get UMA scopes

        Parameters
        ----------
        token : str
            (required)
        permission : str
            (required)
        _request_timeout : int, tuple(int, int), optional
            timeout setting for this request. If one number provided, it
            will be total request timeout. It can also be a pair (tuple)
            of (connection, read) timeouts.
        _request_auth : dict, optional
            set to override the auth_settings for an a single request;
            this effectively ignores the authentication in the spec for
            a single request.
        _content_type : str, Optional
            force content-type for the request.
        _headers : dict, optional
            set to override the headers for a single request; this
            effectively ignores the headers in the spec for a single
            request.
        _host_index : int, optional
            set to override the host_index for a single request; this
            effectively ignores the host_index in the spec for a single
            request.

        Returns
        -------
        unknown
            Returns the result object.
        """
        # noqa: E501

        _param = self._has_scope_scope_get_serialize(
            token=token,
            permission=permission,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "object",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def has_scope_scope_get_without_preload_content(
        self,
        token: StrictStr,
        permission: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Has Scope

        Get UMA scopes

        Parameters
        ----------
        token : str
            (required)
        permission : str
            (required)
        _request_timeout : int, tuple(int, int), optional
            timeout setting for this request. If one number provided, it
            will be total request timeout. It can also be a pair (tuple)
            of (connection, read) timeouts.
        _request_auth : dict, optional
            set to override the auth_settings for an a single request;
            this effectively ignores the authentication in the spec for
            a single request.
        _content_type : str, Optional
            force content-type for the request.
        _headers : dict, optional
            set to override the headers for a single request; this
            effectively ignores the headers in the spec for a single
            request.
        _host_index : int, optional
            set to override the host_index for a single request; this
            effectively ignores the host_index in the spec for a single
            request.

        Returns
        -------
        unknown
            Returns the result object.
        """
        # noqa: E501

        _param = self._has_scope_scope_get_serialize(
            token=token,
            permission=permission,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "object",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _has_scope_scope_get_serialize(
        self,
        token,
        permission,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if token is not None:

            _query_params.append(("token", token))

        if permission is not None:

            _query_params.append(("permission", permission))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/scope",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def heartbeat_heartbeat_get(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Heartbeat

        Endpoint to check if Gateway is contactable

        Parameters
        ----------
        _request_timeout : int, tuple(int, int), optional
            timeout setting for this request. If one number provided, it
            will be total request timeout. It can also be a pair (tuple)
            of (connection, read) timeouts.
        _request_auth : dict, optional
            set to override the auth_settings for an a single request;
            this effectively ignores the authentication in the spec for
            a single request.
        _content_type : str, Optional
            force content-type for the request.
        _headers : dict, optional
            set to override the headers for a single request; this
            effectively ignores the headers in the spec for a single
            request.
        _host_index : int, optional
            set to override the host_index for a single request; this
            effectively ignores the host_index in the spec for a single
            request.

        Returns
        -------
        unknown
            Returns the result object.
        """
        # noqa: E501

        _param = self._heartbeat_heartbeat_get_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "object",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def heartbeat_heartbeat_get_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Heartbeat

        Endpoint to check if Gateway is contactable

        Parameters
        ----------
        _request_timeout : int, tuple(int, int), optional
            timeout setting for this request. If one number provided, it
            will be total request timeout. It can also be a pair (tuple)
            of (connection, read) timeouts.
        _request_auth : dict, optional
            set to override the auth_settings for an a single request;
            this effectively ignores the authentication in the spec for
            a single request.
        _content_type : str, Optional
            force content-type for the request.
        _headers : dict, optional
            set to override the headers for a single request; this
            effectively ignores the headers in the spec for a single
            request.
        _host_index : int, optional
            set to override the host_index for a single request; this
            effectively ignores the host_index in the spec for a single
            request.

        Returns
        -------
        unknown
            Returns the result object.
        """
        # noqa: E501

        _param = self._heartbeat_heartbeat_get_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "object",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def heartbeat_heartbeat_get_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Heartbeat

        Endpoint to check if Gateway is contactable

        Parameters
        ----------
        _request_timeout : int, tuple(int, int), optional
            timeout setting for this request. If one number provided, it
            will be total request timeout. It can also be a pair (tuple)
            of (connection, read) timeouts.
        _request_auth : dict, optional
            set to override the auth_settings for an a single request;
            this effectively ignores the authentication in the spec for
            a single request.
        _content_type : str, Optional
            force content-type for the request.
        _headers : dict, optional
            set to override the headers for a single request; this
            effectively ignores the headers in the spec for a single
            request.
        _host_index : int, optional
            set to override the host_index for a single request; this
            effectively ignores the host_index in the spec for a single
            request.

        Returns
        -------
        unknown
            Returns the result object.
        """
        # noqa: E501

        _param = self._heartbeat_heartbeat_get_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "object",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _heartbeat_heartbeat_get_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/heartbeat",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def session_start_session_post(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Session

        Start client session with cookies

        Parameters
        ----------
        _request_timeout : int, tuple(int, int), optional
            timeout setting for this request. If one number provided, it
            will be total request timeout. It can also be a pair (tuple)
            of (connection, read) timeouts.
        _request_auth : dict, optional
            set to override the auth_settings for an a single request;
            this effectively ignores the authentication in the spec for
            a single request.
        _content_type : str, Optional
            force content-type for the request.
        _headers : dict, optional
            set to override the headers for a single request; this
            effectively ignores the headers in the spec for a single
            request.
        _host_index : int, optional
            set to override the host_index for a single request; this
            effectively ignores the host_index in the spec for a single
            request.

        Returns
        -------
        unknown
            Returns the result object.
        """
        # noqa: E501

        _param = self._session_start_session_post_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "object",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def session_start_session_post_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Session

        Start client session with cookies

        Parameters
        ----------
        _request_timeout : int, tuple(int, int), optional
            timeout setting for this request. If one number provided, it
            will be total request timeout. It can also be a pair (tuple)
            of (connection, read) timeouts.
        _request_auth : dict, optional
            set to override the auth_settings for an a single request;
            this effectively ignores the authentication in the spec for
            a single request.
        _content_type : str, Optional
            force content-type for the request.
        _headers : dict, optional
            set to override the headers for a single request; this
            effectively ignores the headers in the spec for a single
            request.
        _host_index : int, optional
            set to override the host_index for a single request; this
            effectively ignores the host_index in the spec for a single
            request.

        Returns
        -------
        unknown
            Returns the result object.
        """
        # noqa: E501

        _param = self._session_start_session_post_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "object",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def session_start_session_post_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Session

        Start client session with cookies

        Parameters
        ----------
        _request_timeout : int, tuple(int, int), optional
            timeout setting for this request. If one number provided, it
            will be total request timeout. It can also be a pair (tuple)
            of (connection, read) timeouts.
        _request_auth : dict, optional
            set to override the auth_settings for an a single request;
            this effectively ignores the authentication in the spec for
            a single request.
        _content_type : str, Optional
            force content-type for the request.
        _headers : dict, optional
            set to override the headers for a single request; this
            effectively ignores the headers in the spec for a single
            request.
        _host_index : int, optional
            set to override the host_index for a single request; this
            effectively ignores the host_index in the spec for a single
            request.

        Returns
        -------
        unknown
            Returns the result object.
        """
        # noqa: E501

        _param = self._session_start_session_post_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "object",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _session_start_session_post_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/start_session",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def token_by_auth_flow_token_by_auth_flow_get(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Token By Auth Flow

        Redirect to IDP for user authorisation

        Parameters
        ----------
        _request_timeout : int, tuple(int, int), optional
            timeout setting for this request. If one number provided, it
            will be total request timeout. It can also be a pair (tuple)
            of (connection, read) timeouts.
        _request_auth : dict, optional
            set to override the auth_settings for an a single request;
            this effectively ignores the authentication in the spec for
            a single request.
        _content_type : str, Optional
            force content-type for the request.
        _headers : dict, optional
            set to override the headers for a single request; this
            effectively ignores the headers in the spec for a single
            request.
        _host_index : int, optional
            set to override the host_index for a single request; this
            effectively ignores the host_index in the spec for a single
            request.

        Returns
        -------
        unknown
            Returns the result object.
        """
        # noqa: E501

        _param = self._token_by_auth_flow_token_by_auth_flow_get_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "object",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def token_by_auth_flow_token_by_auth_flow_get_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Token By Auth Flow

        Redirect to IDP for user authorisation

        Parameters
        ----------
        _request_timeout : int, tuple(int, int), optional
            timeout setting for this request. If one number provided, it
            will be total request timeout. It can also be a pair (tuple)
            of (connection, read) timeouts.
        _request_auth : dict, optional
            set to override the auth_settings for an a single request;
            this effectively ignores the authentication in the spec for
            a single request.
        _content_type : str, Optional
            force content-type for the request.
        _headers : dict, optional
            set to override the headers for a single request; this
            effectively ignores the headers in the spec for a single
            request.
        _host_index : int, optional
            set to override the host_index for a single request; this
            effectively ignores the host_index in the spec for a single
            request.

        Returns
        -------
        unknown
            Returns the result object.
        """
        # noqa: E501

        _param = self._token_by_auth_flow_token_by_auth_flow_get_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "object",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def token_by_auth_flow_token_by_auth_flow_get_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Token By Auth Flow

        Redirect to IDP for user authorisation

        Parameters
        ----------
        _request_timeout : int, tuple(int, int), optional
            timeout setting for this request. If one number provided, it
            will be total request timeout. It can also be a pair (tuple)
            of (connection, read) timeouts.
        _request_auth : dict, optional
            set to override the auth_settings for an a single request;
            this effectively ignores the authentication in the spec for
            a single request.
        _content_type : str, Optional
            force content-type for the request.
        _headers : dict, optional
            set to override the headers for a single request; this
            effectively ignores the headers in the spec for a single
            request.
        _host_index : int, optional
            set to override the host_index for a single request; this
            effectively ignores the host_index in the spec for a single
            request.

        Returns
        -------
        unknown
            Returns the result object.
        """
        # noqa: E501

        _param = self._token_by_auth_flow_token_by_auth_flow_get_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "object",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _token_by_auth_flow_token_by_auth_flow_get_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/token_by_auth_flow",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def token_by_username_password_token_by_username_password_get(
        self,
        username: StrictStr,
        password: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Token By Username Password

        Get OAUTH token based on username and password

        Parameters
        ----------
        username : str
            (required)
        password : str
            (required)
        _request_timeout : int, tuple(int, int), optional
            timeout setting for this request. If one number provided, it
            will be total request timeout. It can also be a pair (tuple)
            of (connection, read) timeouts.
        _request_auth : dict, optional
            set to override the auth_settings for an a single request;
            this effectively ignores the authentication in the spec for
            a single request.
        _content_type : str, Optional
            force content-type for the request.
        _headers : dict, optional
            set to override the headers for a single request; this
            effectively ignores the headers in the spec for a single
            request.
        _host_index : int, optional
            set to override the host_index for a single request; this
            effectively ignores the host_index in the spec for a single
            request.

        Returns
        -------
        unknown
            Returns the result object.
        """
        # noqa: E501

        _param = self._token_by_username_password_token_by_username_password_get_serialize(
            username=username,
            password=password,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "object",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def token_by_username_password_token_by_username_password_get_with_http_info(
        self,
        username: StrictStr,
        password: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Token By Username Password

        Get OAUTH token based on username and password

        Parameters
        ----------
        username : str
            (required)
        password : str
            (required)
        _request_timeout : int, tuple(int, int), optional
            timeout setting for this request. If one number provided, it
            will be total request timeout. It can also be a pair (tuple)
            of (connection, read) timeouts.
        _request_auth : dict, optional
            set to override the auth_settings for an a single request;
            this effectively ignores the authentication in the spec for
            a single request.
        _content_type : str, Optional
            force content-type for the request.
        _headers : dict, optional
            set to override the headers for a single request; this
            effectively ignores the headers in the spec for a single
            request.
        _host_index : int, optional
            set to override the host_index for a single request; this
            effectively ignores the host_index in the spec for a single
            request.

        Returns
        -------
        unknown
            Returns the result object.
        """
        # noqa: E501

        _param = self._token_by_username_password_token_by_username_password_get_serialize(
            username=username,
            password=password,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "object",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def token_by_username_password_token_by_username_password_get_without_preload_content(
        self,
        username: StrictStr,
        password: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Token By Username Password

        Get OAUTH token based on username and password

        Parameters
        ----------
        username : str
            (required)
        password : str
            (required)
        _request_timeout : int, tuple(int, int), optional
            timeout setting for this request. If one number provided, it
            will be total request timeout. It can also be a pair (tuple)
            of (connection, read) timeouts.
        _request_auth : dict, optional
            set to override the auth_settings for an a single request;
            this effectively ignores the authentication in the spec for
            a single request.
        _content_type : str, Optional
            force content-type for the request.
        _headers : dict, optional
            set to override the headers for a single request; this
            effectively ignores the headers in the spec for a single
            request.
        _host_index : int, optional
            set to override the host_index for a single request; this
            effectively ignores the host_index in the spec for a single
            request.

        Returns
        -------
        unknown
            Returns the result object.
        """
        # noqa: E501

        _param = self._token_by_username_password_token_by_username_password_get_serialize(
            username=username,
            password=password,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "object",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _token_by_username_password_token_by_username_password_get_serialize(
        self,
        username,
        password,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if username is not None:

            _query_params.append(("username", username))

        if password is not None:

            _query_params.append(("password", password))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/token_by_username_password",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
