"""This module is called when the dataproduct is an unidentified filetype."""

import binascii
import logging
import os
from datetime import datetime

from benedict import benedict
from ska_sdp_dataproduct_metadata import MetaData

logger = logging.getLogger(__name__)


def get_file_or_dir_size(path: str) -> int:
    """Calculate file size in kB for a single file or directory."""
    total_size = 0
    if os.path.isfile(path) and not os.path.islink(path):  # Exclude symbolic links
        total_size = os.path.getsize(path)
    elif os.path.isdir(path):
        for dirpath, _, filenames in os.walk(path):
            for filename in filenames:
                file_path = os.path.join(dirpath, filename)
                if not os.path.islink(file_path):  # Exclude symbolic links
                    total_size += os.path.getsize(file_path)
    else:
        raise ValueError(f"Filesystem path {path} does not exist.")

    final_size = total_size / 1024.0
    return final_size if final_size >= 1.0 else 1.0


def get_file_crc(file_path: str):
    """Calculate CRC32 for file."""
    with open(file_path, "rb") as file:
        buffer = file.read()
        buffer = binascii.crc32(buffer) & 0xFFFFFFFF
        return f"{buffer:08x}"


def get_file_dict(file_path: str, relative_path: str, description: str) -> dict:
    """Bild the dict of file attribute for metadata."""
    size = os.path.getsize(file_path)
    crc = get_file_crc(file_path)
    return {
        "crc": crc,
        "description": description,
        "path": relative_path,
        "size": size,
        "status": "done",  # file status: working, done or failure
    }


def build_files_list(path: str, description: str):
    """Build a list of all files within a given directory or a single file."""
    files_list = []

    if os.path.isfile(path):
        file_path = os.path.abspath(path)
        file_dict = get_file_dict(
            file_path=file_path, relative_path=os.path.basename(file_path), description=description
        )
        files_list.append(file_dict)
    elif os.path.isdir(path):
        for root, _, files in os.walk(path, topdown=False):
            for name in files:
                file_path = os.path.join(root, name)
                relative_path = os.path.relpath(file_path, path)
                file_dict = get_file_dict(
                    file_path=file_path, relative_path=relative_path, description=description
                )
                files_list.append(file_dict)
    else:
        raise ValueError("Path must be a file or directory.")
    return files_list


def default_metadata_generator(dataproduct_path: str) -> MetaData:
    """Generate minimal metadata for unknown file types."""
    meta = MetaData()
    now = datetime.now()  # current date and time

    pseudo_eb_id = now.strftime("Unknow-metadata-%Y/%m/%-d%H:%M:%S-%f")
    meta.set_execution_block_id(execution_block_id=pseudo_eb_id)
    data: benedict = meta.get_data()
    description = (
        f"Metadata generated by {__name__} at {pseudo_eb_id} because of no metadata found."
    )

    data.files = build_files_list(dataproduct_path, description)

    data.obscore.access_estsize = get_file_or_dir_size(dataproduct_path)

    return meta
