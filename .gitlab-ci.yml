variables:
  GIT_SUBMODULE_STRATEGY: recursive
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  CI_POETRY_VERSION: 1.8.2

# Enable caching for python
cache:
  key: $CI_COMMIT_REF_SLUG
  paths:
    - .cache/pip

stages:
  - build
  - test
  - lint
  - publish
  - pages
  - scan

include:
    # Python
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/python.gitlab-ci.yml'

    # Docs pages
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/docs.gitlab-ci.yml'

    # Tag Based GitLab Release Management
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/release.gitlab-ci.yml'

    # Build and push the docker image
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/oci-image.gitlab-ci.yml'

    # Build and push the Helm chart
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/helm-chart.gitlab-ci.yml'

    # .post step finalisers eg: badges
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/finaliser.gitlab-ci.yml'

python-test:
  services:
    # Keep in sync with tests/test-services.docker-compose.yml
    - name: bitnami/kafka:3.5.0-debian-11-r1
      alias: kafka
      variables:
        ALLOW_PLAINTEXT_LISTENER: "yes"
        KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
        KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka:9093
        KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
        KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
        KAFKA_CFG_LISTENERS_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
        KAFKA_CFG_NODE_ID: 0
        KAFKA_CFG_PROCESS_ROLES: controller,broker
        KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
        KAFKA_CFG_MESSAGE_MAX_BYTES: 134217728
  variables:
    KAFKA_CFG_MESSAGE_MAX_BYTES: 134217728
    # Needed to allow kafka & zookeeper to talk to each other
    # See https://docs.gitlab.com/runner/configuration/feature-flags.html
    FF_NETWORK_PER_BUILD: "true"
    # To debug the above services, uncomment the below line. For more info see
    # https://gitlab.com/gitlab-org/gitlab-runner/-/issues/2119#note_1142144587
    # CI_DEBUG_SERVICES: trace

integration_tests:
  stage: test
  image: $SKA_K8S_TOOLS_DOCKER_BUILDER_IMAGE
  services:
    - docker:27.0.2-dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: "" # Tells the DinD service to run without TLS
    DOCKER_BUILDKIT: "1"

    # server repo to clone for compose files
    DLM_SERVER_REPO: https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/ska-telescope/ska-data-lifecycle.git
    DLM_SERVER_REF: "1.2.0"

    # URLs must point to the DinD host, not localhost
    STORAGE_URL:  http://docker:8003
    POSTGREST_URL: http://docker:3000
    RCLONE_BASE:   https://docker:5572

    COMPOSE_PROJECT_NAME: integration-tests

  before_script:
    - docker --version && docker compose version || true
    - poetry --version || pip install "poetry==${CI_POETRY_VERSION:-1.8.2}"
    - poetry install --no-interaction
    - git clone --depth 1 --branch "$DLM_SERVER_REF" "$DLM_SERVER_REPO" ../ska-data-lifecycle
    - export DLM_SERVER_DIR="$(readlink -f ../ska-data-lifecycle)"
  script:
    - poetry run pytest -m integration -vv -s
  artifacts:
    when: on_failure
    paths: [.pytest_cache, build]
