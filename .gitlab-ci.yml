variables:
  GIT_SUBMODULE_STRATEGY: recursive
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  CI_POETRY_VERSION: 1.8.2

# Enable caching for python
cache:
  key: $CI_COMMIT_REF_SLUG
  paths:
    - .cache/pip

stages:
  - build
  - test
  - lint
  - publish
  - pages
  - scan

include:
    # Python
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/python.gitlab-ci.yml'

    # Docs pages
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/docs.gitlab-ci.yml'

    # Tag Based GitLab Release Management
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/release.gitlab-ci.yml'

    # Build and push the docker image
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/oci-image.gitlab-ci.yml'

    # Build and push the Helm chart
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/helm-chart.gitlab-ci.yml'

    # .post step finalisers eg: badges
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/finaliser.gitlab-ci.yml'

python-test: # Unit tests
  stage: test
  variables:
    # Don't collect integration folder and skip the marker
    PYTHON_VARS_AFTER_PYTEST: '--ignore=tests/integration -m "not integration"'

integration_tests:
  stage: test
  image: $SKA_K8S_TOOLS_DOCKER_BUILDER_IMAGE

  services:
    - docker:27.0.2-dind # DinD service
    - alias: kafka
      name: apache/kafka:3.8.0
      variables:
        # Internal listeners (inside the container)
        KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
        KAFKA_LISTENERS_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
        KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
        KAFKA_PROCESS_ROLES: controller,broker
        KAFKA_NODE_ID: 0

        # Controller should talk to *itself* via localhost
        KAFKA_CONTROLLER_QUORUM_VOTERS: 0@localhost:9093

        # External clients (your job) will connect to the alias
        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092

        # QoL
        ALLOW_PLAINTEXT_LISTENER: "yes"
        KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
        KAFKA_MESSAGE_MAX_BYTES: 134217728

  variables: # Job-wide env
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    DLM_SERVER_REPO: https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/ska-telescope/ska-data-lifecycle.git
    DLM_SERVER_REF: "1.2.0"
    STORAGE_URL:  http://docker:8003
    POSTGREST_URL: http://docker:3000
    RCLONE_BASE:   https://docker:5572
    COMPOSE_PROJECT_NAME: integration-tests
    KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    # To debug services, uncomment the line below. For more info see
    # https://gitlab.com/gitlab-org/gitlab-runner/-/issues/2119#note_1142144587
    # CI_DEBUG_SERVICES: trace

  before_script:
      # Ensure Docker CLI + Compose v2 plugin exist in the job image
    - |
      if ! docker compose version >/dev/null 2>&1; then
        echo "Installing docker compose plugin..."
        if command -v apt-get >/dev/null 2>&1; then
          apt-get update -y
          apt-get install -y docker-compose-plugin || true
        elif command -v apk >/dev/null 2>&1; then
          apk add --no-cache docker-cli-compose || true
        fi
      fi
      # Fallback: download the CLI plugin directly if the package route failed
      if ! docker compose version >/dev/null 2>&1; then
        echo "Falling back to downloading docker-compose plugin binaryâ€¦"
        mkdir -p /usr/local/lib/docker/cli-plugins
        curl -sSL "https://github.com/docker/compose/releases/download/v2.29.7/docker-compose-linux-$(uname -m)" \
          -o /usr/local/lib/docker/cli-plugins/docker-compose
        chmod +x /usr/local/lib/docker/cli-plugins/docker-compose
      fi
    - docker --version && docker compose version || true
    - poetry --version || pip install "poetry==${CI_POETRY_VERSION:-1.8.2}"
    - poetry install --no-interaction
    - git clone --depth 1 --single-branch --branch "$DLM_SERVER_REF" "$DLM_SERVER_REPO" "$CI_PROJECT_DIR/../ska-data-lifecycle"
    - export DLM_SERVER_DIR="$(readlink -f "$CI_PROJECT_DIR/../ska-data-lifecycle")"

  script:
    - poetry run pytest -vv -s tests/integration
